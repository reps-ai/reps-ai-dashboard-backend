"""reset the db and changed data type to uuid for id cols

Revision ID: 2a0e4474110d
Revises: 
Create Date: 2025-03-25 11:43:49.420547

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2a0e4474110d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gyms',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tags',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('color', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('branches',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_settings',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('personality', sa.String(length=100), nullable=False),
    sa.Column('agent_name', sa.String(length=100), nullable=False),
    sa.Column('greeting', sa.String(length=255), nullable=True),
    sa.Column('allow_interruptions', sa.Boolean(), nullable=False),
    sa.Column('offer_human_transfer', sa.Boolean(), nullable=False),
    sa.Column('escalation_threshold', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('branch_id')
    )
    op.create_table('call_settings',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('max_duration', sa.Integer(), nullable=True),
    sa.Column('call_hours_start', sa.String(length=10), nullable=True),
    sa.Column('call_hours_end', sa.String(length=10), nullable=True),
    sa.Column('active_call_days', sa.Text(), nullable=True),
    sa.Column('retry_attempts', sa.Integer(), nullable=True),
    sa.Column('retry_interval', sa.Integer(), nullable=True),
    sa.Column('do_not_disturb', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('branch_id')
    )
    op.create_table('gym_settings',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('website', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('logo_url', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('branch_id')
    )
    op.create_table('knowledge_base',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('pdf_url', sa.String(length=255), nullable=True),
    sa.Column('question', sa.Text(), nullable=True),
    sa.Column('answer', sa.Text(), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id',postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('profile_picture', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('voice_settings',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('voice_type', sa.String(length=100), nullable=False),
    sa.Column('speaking_speed', sa.String(length=50), nullable=True),
    sa.Column('volume', sa.String(length=50), nullable=True),
    sa.Column('voice_sample_url', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('branch_id')
    )
    op.create_table('leads',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('assigned_to_user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('lead_status', sa.String(length=50), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('interest', sa.String(length=255), nullable=True),
    sa.Column('interest_location', sa.String(length=255), nullable=True),
    sa.Column('last_conversation_summary', sa.Text(), nullable=True),
    sa.Column('last_called', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('next_appointment_date', sa.DateTime(), nullable=True),
    sa.Column('custom_fields', sa.Text(), nullable=True),
    sa.Column('fitness_goals', sa.Text(), nullable=True),
    sa.Column('budget_range', sa.String(length=100), nullable=True),
    sa.Column('timeframe', sa.String(length=100), nullable=True),
    sa.Column('preferred_contact_method', sa.String(length=50), nullable=True),
    sa.Column('preferred_contact_time', sa.Text(), nullable=True),
    sa.Column('urgency', sa.String(length=50), nullable=True),
    sa.Column('qualification_score', sa.Integer(), nullable=True),
    sa.Column('qualification_notes', sa.String(length=255), nullable=True),
    sa.Column('fitness_level', sa.String(length=50), nullable=True),
    sa.Column('previous_gym_experience', sa.Boolean(), nullable=True),
    sa.Column('specific_health_goals', sa.Text(), nullable=True),
    sa.Column('preferred_training_type', sa.Text(), nullable=True),
    sa.Column('availability', sa.Text(), nullable=True),
    sa.Column('medical_conditions', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_branch',
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'branch_id')
    )
    op.create_table('appointments',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('lead_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('employee_user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('appointment_type', sa.String(length=100), nullable=False),
    sa.Column('appointment_date', sa.DateTime(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('appointment_status', sa.String(length=50), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('reminder_sent', sa.Boolean(), nullable=False),
    sa.Column('employee_name', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['employee_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('follow_up_campaigns',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('lead_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('frequency', sa.Integer(), nullable=False),
    sa.Column('gap', sa.Integer(), nullable=False),
    sa.Column('campaign_status', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lead_tag',
    sa.Column('lead_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('tag_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('lead_id', 'tag_id')
    )
    op.create_table('members',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('lead_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('membership_start_date', sa.DateTime(), nullable=False),
    sa.Column('membership_type', sa.String(length=100), nullable=False),
    sa.Column('membership_status', sa.String(length=50), nullable=False),
    sa.Column('payment_method', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('call_logs',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('lead_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('call_type', sa.String(length=50), nullable=False),
    sa.Column('human_notes', sa.Text(), nullable=True),
    sa.Column('outcome', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('call_status', sa.String(length=50), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('recording_url', sa.String(length=255), nullable=True),
    sa.Column('transcript', sa.Text(), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('sentiment', sa.String(length=50), nullable=True),
    sa.Column('campaign_id', postgresql.UUID(as_uuid=True) , nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['campaign_id'], ['follow_up_campaigns.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('follow_up_calls',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('lead_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('branch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('gym_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('campaign_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('number_of_calls', sa.Integer(), nullable=True),
    sa.Column('call_date_time', sa.DateTime(), nullable=False),
    sa.Column('duration', sa.Integer(), nullable=True),
    sa.Column('call_type', sa.String(length=50), nullable=False),
    sa.Column('human_notes', sa.Text(), nullable=True),
    sa.Column('outcome', sa.String(length=50), nullable=True),
    sa.Column('call_status', sa.String(length=50), nullable=False),
    sa.Column('recording_url', sa.String(length=255), nullable=True),
    sa.Column('transcript', sa.Text(), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('sentiment', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['campaign_id'], ['follow_up_campaigns.id'], ),
    sa.ForeignKeyConstraint(['gym_id'], ['gyms.id'], ),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('follow_up_calls')
    op.drop_table('call_logs')
    op.drop_table('members')
    op.drop_table('lead_tag')
    op.drop_table('follow_up_campaigns')
    op.drop_table('appointments')
    op.drop_table('user_branch')
    op.drop_table('leads')
    op.drop_table('voice_settings')
    op.drop_table('users')
    op.drop_table('knowledge_base')
    op.drop_table('gym_settings')
    op.drop_table('call_settings')
    op.drop_table('ai_settings')
    op.drop_table('branches')
    op.drop_table('tags')
    op.drop_table('gyms')
    # ### end Alembic commands ###
